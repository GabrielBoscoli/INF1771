/* consult("C:/Users/Gabriel Boscoli/Documents/INF1771/trabalho-2.txt"). */

go :- write('Bem-vindo ao jogo dos animais. Vou tentar adivinhar qual está pensando.'),
	nl,
	nl,
	deducao,
	my_save('C:/Users/Gabriel Boscoli/Documents/INF1771/trabalho-2.txt').

deducao :- hipotese(Animal),
	write('É um(a) '),
	write(Animal),
	write('? (s/n)'),
	read(Resposta),
	nl,
	( (Resposta == sim ; Resposta == s) -> write('YAY! Adivinhei seu animal!') ; wrong(Animal) ),
	undo.


/* hipoteses */
:- dynamic hipotese/1.

hipotese(zebra)	:- zebra, !.
hipotese(leao)	:- leao, !.
hipotese(aguia)	:- aguia, !.
hipotese(pinguim)	:- pinguim, !.
hipotese(lagarto)	:- lagarto, !.

hipotese(nao_encontrado).

/* regras de identificacao de cada animal */
		  
:- dynamic zebra/0.

zebra :- mamifero,
		  listras.
			
:- dynamic leao/0.
		  
leao :- nao_listras,
	mamifero.

:- dynamic aguia/0.

aguia :- nao_mamifero,
	nao_listras,
	passaro,
	voa.
			
:- dynamic pinguim/0.
		  
pinguim :- nao_mamifero,
	nao_listras,
	passaro,
	nao_voa.

:- dynamic lagarto/0.
		  
lagarto :- nao_mamifero,
	nao_listras,
	nao_passaro,
	nao_voa.

/* regras de classificação */

mamifero :- verify('É um mamífero?'), !.
nao_mamifero :- verify_negation('É um mamífero?'), !.
listras :- verify('Tem listras?'), !.
nao_listras :- verify_negation('Tem listras?'), !.
passaro :- verify('É uma ave?'), !.
nao_passaro :- verify_negation('É uma ave?'), !.
voa :- verify('Ele voa?'), !.
nao_voa :- verify_negation('Ele voa?'), !.

/* perguntas */
ask(Pergunta) :-
	/* write('O(a) seu animal tem a seguinte caracteristica: '), */
	write(Pergunta),
	write(' (s/n): '),
	read(Resposta),
	nl,
	( (Resposta == sim ; Resposta == s)
		->
		assert(sim(Pergunta)) ;
		assert(nao(Pergunta)), fail).
		
/* perguntas no caso de negacao*/
ask_negation(Pergunta) :-
	/* write('O(a) seu animal tem a seguinte caracteristica: '), */
	write(Pergunta),
	write(' (s/n): '),
	read(Resposta),
	nl,
	( (Resposta == sim ; Resposta == s)
		->
		assert(sim(Pergunta)), fail ;
		assert(nao(Pergunta))).

:- dynamic sim/1, nao/1.

/* verificar */
verify(X) :-
	(sim(X)	->	true ;	(nao(X)	 ->	 fail ;	 ask(X))).
	
/* verificar a negacao */
verify_negation(X) :-
	(sim(X)	->	false ;	(nao(X)	 ->	 true ;	 ask_negation(X))).

/* quando a deducao está errada */
wrong(Animal) :-
	write('Puxa! Eu não sei! Qual animal pensou?'),
	read(NovoAnimal),
	write('Qual pergunta devo fazer para distinguir '),
	write(NovoAnimal),
	write(' de '),
	write(Animal),
	write('?'),
	read(NovaPergunta),
	write('Agora digite qual a resposta certa para '),
	write(NovoAnimal),
	write(' (s/n): '),
	read(Resposta),
	( (Resposta == sim ; Resposta == s) -> resposta_sim(Animal, NovoAnimal, NovaPergunta) ; resposta_nao(Animal, NovoAnimal, NovaPergunta) ),
	retract(hipotese(nao_encontrado)),
	assert((hipotese(NovoAnimal) :- NovoAnimal, !)),
	assert(hipotese(nao_encontrado)).
	
/* quando a resposta para a nova pergunta for positiva */
resposta_sim(Animal, NovoAnimal, NovaPergunta) :-
	clause(Animal, B),
	retractall(Animal),
	atom_string(NovaPergunta, S),
	assert((NovoAnimal :- B, verify(S))),
	assert((Animal :- B, verify_negation(S))).
	
/* quando a resposta para a nova pergunta for negativa */
resposta_nao(Animal, NovoAnimal, NovaPergunta) :-
	clause(Animal, B),
	retractall(Animal),
	assert((Animal :- B, verify(NovaPergunta))),
	assert((NovoAnimal :- B, verify_negation(NovaPergunta))).
	
/* salva em disco a base de conhecimento */
my_save(ToFile) :-
	telling(Old),      /* current write output */
	tell(ToFile),      /* open this file */ 
	listing,           /* list all clauses in memory */ 
	told,              /* close ToFile */ 
	tell(Old).         /* resume this output */

/* limpar os asserts */
undo :- retract(sim(_)), fail.
undo :- retract(nao(_)), fail.
undo.