
:- dynamic expand_query/4.
:- multifile expand_query/4.


ask(Pergunta) :-
    write(Pergunta),
    write(' (s/n): '),
    read(Resposta),
    nl,
    (   (   Resposta==sim
        ;   Resposta==s
        )
    ->  assert(sim(Pergunta))
    ;   assert(nao(Pergunta)),
        fail
    ).

:- dynamic portray/1.
:- multifile portray/1.


passaro :-
    verify('É um pássaro?'),
    !.

:- dynamic prolog_load_file/2.
:- multifile prolog_load_file/2.


:- dynamic zebra/0.

zebra :-
    mamifero,
    listras.

:- dynamic goal_expansion/4.
:- multifile goal_expansion/4.


:- dynamic jacare/0.

jacare :-
    true,
    verify("Rasteija?"),
    verify_negation('Solta veneno?'),
    verify_negation('Possui menos de 1 metro na fase adulta?'),
    verify_negation("Eh praticamente um jacare?").

:- dynamic sim/1.


:- dynamic expand_answer/2.
:- multifile expand_answer/2.


voa :-
    verify('Ele voa?'),
    !.

:- dynamic leao/0.

leao :-
    mamifero.

:- dynamic file_search_path/2.
:- multifile file_search_path/2.

file_search_path(library, Dir) :-
    library_directory(Dir).
file_search_path(swi, A) :-
    system:current_prolog_flag(home, A).
file_search_path(swi, A) :-
    system:current_prolog_flag(shared_home, A).
file_search_path(library, app_config(lib)).
file_search_path(library, swi(library)).
file_search_path(library, swi(library/clp)).
file_search_path(foreign, swi(B)) :-
    system:
    (   \+ current_prolog_flag(windows, true),
        current_prolog_flag(arch, A),
        atom_concat('lib/', A, B)
    ).
file_search_path(foreign, swi(A)) :-
    system:
    (   (   current_prolog_flag(windows, true)
        ->  A=bin
        ;   A=lib
        )
    ).
file_search_path(path, C) :-
    system:
    (   getenv('PATH', A),
        (   current_prolog_flag(windows, true)
        ->  atomic_list_concat(B, ;, A)
        ;   atomic_list_concat(B, :, A)
        ),
        '$member'(C, B)
    ).
file_search_path(user_app_data, A) :-
    system:'$xdg_prolog_directory'(data, A).
file_search_path(common_app_data, A) :-
    system:'$xdg_prolog_directory'(common_data, A).
file_search_path(user_app_config, A) :-
    system:'$xdg_prolog_directory'(config, A).
file_search_path(common_app_config, A) :-
    system:'$xdg_prolog_directory'(common_config, A).
file_search_path(app_data, user_app_data('.')).
file_search_path(app_data, common_app_data('.')).
file_search_path(app_config, user_app_config('.')).
file_search_path(app_config, common_app_config('.')).
file_search_path(app_preferences, user_app_config('.')).
file_search_path(user_profile, app_preferences('.')).
file_search_path(autoload, swi(library)).
file_search_path(autoload, pce(prolog/lib)).
file_search_path(autoload, app_config(lib)).
file_search_path(pack, app_data(pack)).
file_search_path(library, PackLib) :-
    '$pack':pack_dir(_Name, prolog, PackLib).
file_search_path(foreign, PackLib) :-
    '$pack':pack_dir(_Name, foreign, PackLib).
file_search_path(pce, PceHome) :-
    link_xpce:
    (   current_prolog_flag(xpce, true),
        pcehome_(PceHome)
    ).
file_search_path(library, pce('prolog/lib')).
file_search_path(foreign, pce(ArchLib)) :-
    link_xpce:
    (   current_prolog_flag(arch, Arch),
        atom_concat('lib/', Arch, ArchLib)
    ).

my_save(ToFile) :-
    telling(Old),
    tell(ToFile),
    listing,
    told,
    tell(Old).

:- dynamic term_expansion/4.
:- multifile term_expansion/4.


verify_negation(X) :-
    (   sim(X)
    ->  false
    ;   nao(X)
    ->  true
    ;   ask_negation(X)
    ).

:- dynamic crocodilo/0.

crocodilo :-
    true,
    verify("Rasteija?"),
    verify_negation('Solta veneno?'),
    verify_negation('Possui menos de 1 metro na fase adulta?'),
    verify("Eh praticamente um jacare?").

mamifero :-
    verify('É um mamífero?'),
    !.

:- multifile prolog_list_goal/1.


:- thread_local thread_message_hook/3.
:- dynamic thread_message_hook/3.
:- volatile thread_message_hook/3.


:- dynamic hipotese/1.

hipotese(zebra) :-
    zebra,
    !.
hipotese(leao) :-
    leao,
    !.
hipotese(aguia) :-
    aguia,
    !.
hipotese(pinguim) :-
    pinguim,
    !.
hipotese(lagarto) :-
    lagarto,
    !.
hipotese(cobra) :-
    cobra,
    !.
hipotese(iguana) :-
    iguana,
    !.
hipotese(jacare) :-
    jacare,
    !.
hipotese(crocodilo) :-
    crocodilo,
    !.
hipotese(nao_encontrado).

:- dynamic resource/3.
:- multifile resource/3.


verify(X) :-
    (   sim(X)
    ->  true
    ;   nao(X)
    ->  fail
    ;   ask(X)
    ).

listras :-
    verify('Tem listras?'),
    !.

:- multifile message_property/2.


undo :-
    retract(sim(_)),
    fail.
undo :-
    retract(nao(_)),
    fail.
undo.

:- dynamic lagarto/0.

lagarto :-
    verify_negation("Rasteija?").

:- dynamic library_directory/1.
:- multifile library_directory/1.


go :-
    write('Bem-vindo ao jogo dos animais. Vou tentar adivinhar qual está pensando.'),
    nl,
    nl,
    deducao,
    my_save('C:/Users/Gabriel Boscoli/Documents/INF1771/trabalho-3.txt').

:- dynamic message_hook/3.
:- multifile message_hook/3.


resposta_sim(Animal, NovoAnimal, NovaPergunta) :-
    clause(Animal, B),
    retractall(Animal),
    atom_string(NovaPergunta, S),
    assert((NovoAnimal:-B, verify(S))),
    assert((Animal:-B, verify_negation(S))).

:- dynamic exception/3.
:- multifile exception/3.


:- dynamic term_expansion/2.
:- multifile term_expansion/2.


:- dynamic cobra/0.

cobra :-
    true,
    verify("Rasteija?"),
    verify('Solta veneno?').

resposta_nao(Animal, NovoAnimal, NovaPergunta) :-
    clause(Animal, B),
    retractall(Animal),
    assert((Animal:-B, verify(NovaPergunta))),
    assert((NovoAnimal:-B, verify_negation(NovaPergunta))).

:- dynamic prolog_exception_hook/4.
:- multifile prolog_exception_hook/4.

prolog_exception_hook(error(E, context(Ctx0, Msg)), error(E, context(prolog_stack(Stack), Msg)), Fr, GuardSpec) :-
    prolog_stack:
    (   current_prolog_flag(backtrace, true),
        \+ is_stack(Ctx0, _Frames),
        (   atom(GuardSpec)
        ->  debug(backtrace,
                  'Got uncaught (guard = ~q) exception ~p (Ctx0=~p)',
                  [GuardSpec, E, Ctx0]),
            stack_guard(GuardSpec),
            Guard=GuardSpec
        ;   prolog_frame_attribute(GuardSpec,
                                   predicate_indicator,
                                   Guard),
            debug(backtrace,
                  'Got exception ~p (Ctx0=~p, Catcher=~p)',
                  [E, Ctx0, Guard]),
            stack_guard(Guard)
        ),
        (   current_prolog_flag(backtrace_depth, Depth)
        ->  Depth>0
        ;   Depth=20
        ),
        get_prolog_backtrace(Depth,
                             Stack0,
                             [frame(Fr), guard(Guard)]),
        debug(backtrace, 'Stack = ~p', [Stack0]),
        clean_stack(Stack0, Stack1),
        join_stacks(Ctx0, Stack1, Stack)
    ).

:- dynamic prolog_file_type/2.
:- multifile prolog_file_type/2.

prolog_file_type(pl, prolog).
prolog_file_type(prolog, prolog).
prolog_file_type(qlf, prolog).
prolog_file_type(qlf, qlf).
prolog_file_type(A, executable) :-
    system:current_prolog_flag(shared_object_extension, A).
prolog_file_type(dylib, executable) :-
    system:current_prolog_flag(apple, true).

:- dynamic aguia/0.

aguia :-
    passaro,
    voa.

wrong(Animal) :-
    write('Puxa! Eu não sei! Qual animal pensou?'),
    read(NovoAnimal),
    write('Qual pergunta devo fazer para distinguir '),
    write(NovoAnimal),
    write(' de '),
    write(Animal),
    write(?),
    read(NovaPergunta),
    write('Agora digite qual a resposta certa para '),
    write(NovoAnimal),
    write(' (s/n): '),
    read(Resposta),
    (   (   Resposta==sim
        ;   Resposta==s
        )
    ->  resposta_sim(Animal, NovoAnimal, NovaPergunta)
    ;   resposta_nao(Animal, NovoAnimal, NovaPergunta)
    ),
    retract(hipotese(nao_encontrado)),
    assert((hipotese(NovoAnimal):-NovoAnimal, !)),
    assert(hipotese(nao_encontrado)).

:- dynamic nao/1.


:- dynamic goal_expansion/2.
:- multifile goal_expansion/2.


:- dynamic pinguim/0.

pinguim :-
    passaro.

:- multifile prolog_predicate_name/2.


deducao :-
    hipotese(Animal),
    write('É um(a) '),
    write(Animal),
    write('? (s/n)'),
    read(Resposta),
    nl,
    (   (   Resposta==sim
        ;   Resposta==s
        )
    ->  write('YAY! Adivinhei seu animal!')
    ;   wrong(Animal)
    ),
    undo.

:- multifile prolog_clause_name/2.


:- dynamic iguana/0.

iguana :-
    true,
    verify("Rasteija?"),
    verify_negation('Solta veneno?'),
    verify('Possui menos de 1 metro na fase adulta?').

:- dynamic resource/2.
:- multifile resource/2.


ask_negation(Pergunta) :-
    write(Pergunta),
    write(' (s/n): '),
    read(Resposta),
    nl,
    (   (   Resposta==sim
        ;   Resposta==s
        )
    ->  assert(sim(Pergunta)),
        fail
    ;   assert(nao(Pergunta))
    ).
